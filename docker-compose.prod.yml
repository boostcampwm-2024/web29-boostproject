services:
  db-healthcheck:
    image: curlimages/curl:latest
    container_name: db-healthcheck
    command: >
      /bin/sh -c "
        curl -f telnet://${REDIS_HOST}:${REDIS_PORT} || exit 1;
        curl -f telnet://${MYSQL_HOST}:${MYSQL_PORT} || exit 1;
        curl -f telnet://${MONGO_HOST}:27017 || exit 1;
      "
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    container_name: backend
    ports:
      - "3000:3000"
    build:
      target: production
    environment:
      # 배포 환경 세팅
      - NODE_ENV=production

      # MySQL 세팅
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}

      # Mongo 세팅
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - LOG_LEVEL=${LOG_LEVEL}
    networks:
      - app-network

  frontend:
    container_name: frontend
    depends_on:
      backend:
        condition: service_started
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:3000
    extra_hosts:
      - "db-host:${DATABASE_HOST}"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
