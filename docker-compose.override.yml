version: "3.8"

services:
  redis:
    image: redis:latest
    container_name: redis-container
    ports:
      - "6379:6379"
    networks:
      - app-network
    command: redis-server --bind 0.0.0.0

  mysql:
    image: mysql:8.0
    container_name: mysql-container
    ports:
      - "3306:3306"
    networks:
      - app-network
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: dev_db
      MYSQL_USER: honey
      MYSQL_PASSWORD: 1234
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test:
        ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1234"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: --bind-address=0.0.0.0

  backend:
    build:
      context: .
      dockerfile: ./packages/backend/Dockerfile
    container_name: backend
    ports:
      - "3000:3000"
      - "9001:9001"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      mongodb:
        condition: service_healthy
    environment:
      - MYSQL_HOST=mysql-container
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=dev_db
      - MYSQL_PASSWORD=1234
      - MYSQL_USER=honey
      - NODE_ENV=dev
      - ELASTIC_NODE=http://elsatic:9200
      - ELASTIC_USERNAME=honey
      - ELASTIC_PASSWORD=1234
      - REDIS_HOST=redis-container
      - REDIS_PORT=6379
      - REDIS_TTL=3600
      - MONGO_HOST=mongodb-container
      - MONGO_USER=honey
      - MONGO_PASSWORD=1234
      - MONGO_DB=dev_db
      - LOG_LEVEL=info
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: ./packages/frontend/Dockerfile
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - app-network
  mongodb:
    image: mongo:latest
    container_name: mongodb-container
    ports:
      - "27017:27017"
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: honey
      MONGO_INITDB_ROOT_PASSWORD: 1234
      MONGO_INITDB_DATABASE: dev_db
      MONGODB_AUTH_MECHANISM: SCRAM-SHA-256
    command: ["mongod", "--bind_ip", "0.0.0.0"]
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--username",
          "honey",
          "--password",
          "1234",
          "--eval",
          "db.runCommand({ ping: 1 })",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cat/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.12.0
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat_data:/usr/share/filebeat/data
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - KIBANA_HOST=http://kibana:5601
    networks:
      - app-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.12.0
    container_name: metricbeat
    user: root
    volumes:
      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
      - metricbeat_data:/usr/share/metricbeat/data
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - KIBANA_HOST=http://kibana:5601
    networks:
      - app-network
    depends_on:
      elasticsearch:
        condition: service_healthy

volumes:
  filebeat_data:
  metricbeat_data:
  mysql_data:
  mongo_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge
